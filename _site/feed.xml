<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2023-03-20T22:06:32-05:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">NinjaStars</title><subtitle>This site provides all of the infrastructure, tools, techniques, and guides to demonstrate different stages of the attack chain. By using these guides you will demonstrate both red and blue team activities.
</subtitle><entry><title type="html">Ignore sensitive files in git!</title><link href="http://0.0.0.0:4000/infrastructure/2021/11/19/infrastructure-gitignore.html" rel="alternate" type="text/html" title="Ignore sensitive files in git!" /><published>2021-11-19T14:34:10-06:00</published><updated>2021-11-19T14:34:10-06:00</updated><id>http://0.0.0.0:4000/infrastructure/2021/11/19/infrastructure-gitignore</id><content type="html" xml:base="http://0.0.0.0:4000/infrastructure/2021/11/19/infrastructure-gitignore.html">&lt;p&gt;
When using tools like Terraform and repositories like Github together there is a danger in exposing too much data. Automation tools like Terraform typically require you to store account details and credentials. This is information you certainly do not want exposed publicly as it would completely expose your access.
&lt;/p&gt;

&lt;h3&gt;Step 1 - Create a gitignore&lt;/h3&gt;

&lt;p&gt;
I've placed a global gitignore file in my ~/Documents folder (you can put it anywhere) so that any repository worked with will not publish sensitive data. The file looks like this;
&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars
terraform.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*
*tfplan*
*.plan*
*lock*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can see that this will prevent files like terraform.tfvars along with state files to be pushed to the repository.
&lt;p&gt;

&lt;br /&gt;
&lt;br /&gt;

&lt;h3&gt;Step 2 - Set the variable&lt;/h3&gt;

&lt;p&gt;
Set the global variable for git to use this file, meaning that it will affect all repositories on this system.
&lt;p&gt;

```
git config --global core.excludesfile ~/Documents/.gitignore
```

&lt;h3&gt;Step 3 - Remove files accidentally pushed&lt;/h3&gt;

&lt;p&gt;
If you have pushed a file to the repository that shouldn't be there you have a couple of options. You could destroy the entire repository and then re-initialize git on your localhost. Or you can remove the individual files with a command like this (replacing terraform.tfvars with the file you want removed.
&lt;/p&gt;

```
git rm -f terraform.tfvars
```

&lt;!-- Cloudflare Web Analytics --&gt;&lt;script defer=&quot;&quot; src=&quot;https://static.cloudflareinsights.com/beacon.min.js&quot; data-cf-beacon=&quot;{&amp;quot;token&amp;quot;: &amp;quot;3ff248322f9d497f8802ebf7d47130c1&amp;quot;}&quot;&gt;&lt;/script&gt;&lt;!-- End Cloudflare Web Analytics --&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</content><author><name></name></author><category term="infrastructure" /><summary type="html">When using tools like Terraform and repositories like Github together there is a danger in exposing too much data. Automation tools like Terraform typically require you to store account details and credentials. This is information you certainly do not want exposed publicly as it would completely expose your access.</summary></entry><entry><title type="html">Bitbucket Server</title><link href="http://0.0.0.0:4000/infrastructure/2021/11/19/infrastructure-bitbucket.html" rel="alternate" type="text/html" title="Bitbucket Server" /><published>2021-11-19T14:34:10-06:00</published><updated>2021-11-19T14:34:10-06:00</updated><id>http://0.0.0.0:4000/infrastructure/2021/11/19/infrastructure-bitbucket</id><content type="html" xml:base="http://0.0.0.0:4000/infrastructure/2021/11/19/infrastructure-bitbucket.html">&lt;p&gt;This guide walks through how to instantiate a Virtual Machine (VM) in Google Cloud Platform (GCP) with a running Bitbucket container, using Terraform.&lt;/p&gt;

&lt;p&gt;Getting this type of infrastructure setup on a mac is often painful or not possible. Ideally this deploys enough that you’re able to destroy it when done using it (or at least shut it down).&lt;/p&gt;

&lt;h3 id=&quot;step-1---install-terraform&quot;&gt;Step 1 - Install Terraform&lt;/h3&gt;

&lt;p&gt;Terraform is a cross platform automation framework most of our customers will be using. Install the CLI by following the steps here, https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap hashicorp/tap
brew install hashicorp/tap/terraform
terraform -install-autocomplete
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-2---install-gcp-command-line&quot;&gt;Step 2 - Install GCP Command Line&lt;/h3&gt;

&lt;p&gt;Follow this guide to install the GCP SDK, https://cloud.google.com/sdk/docs/install-sdk. The basic steps are to download the file from the afformentioned site and;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -xf google-cloud-sdk-329.0.0-darwin-x86_64.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then to get setup run the command below and follow the prompts;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3---deploy&quot;&gt;Step 3 - Deploy&lt;/h3&gt;

&lt;p&gt;This repository includes terraform and docker configurations to instantiate the VM in GCP, then run a Bitbucket container that has been secured with SSL onit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/stephen-snyk/snyk-box.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See the README on the repo for the latest details on variables that need to be set.&lt;/p&gt;

&lt;p&gt;Once the variables are set, run the following to initialize the project, create a plan file from the .tf configuration files, and finally apply that plan file to build the infrastructure;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform init
terraform plan --out &quot;first.plan&quot;
terraform apply &quot;first.plan
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To destroy all of the infrastructure built in the previous step, use;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And to interate through configuration changes you only need the terraform plan, apply and destroy steps.&lt;/p&gt;

&lt;h3 id=&quot;step-4---personalize-setup&quot;&gt;Step 4 - Personalize Setup&lt;/h3&gt;

&lt;p&gt;At this point you should have Bitbucket server running with a public IP assigned. You can find the IP on your VM in GCP and it is also output in the terraform apply phase. Navigate to;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://&amp;lt;public IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From here you will go through the basic steps of licensing Bitbucket (you’ll need to create an account if you don’t have one), creating an administrative user, and adding repositories.&lt;/p&gt;

&lt;h3 id=&quot;step-5---snyk-broker&quot;&gt;Step 5 - Snyk Broker&lt;/h3&gt;

&lt;p&gt;Snyk Broker should also be deployed at this point. After adding a repository to Bitbucket, attempt to add a project from the Snyk UI.&lt;/p&gt;

&lt;!-- Cloudflare Web Analytics --&gt;
&lt;script defer=&quot;&quot; src=&quot;https://static.cloudflareinsights.com/beacon.min.js&quot; data-cf-beacon=&quot;{&amp;quot;token&amp;quot;: &amp;quot;3ff248322f9d497f8802ebf7d47130c1&amp;quot;}&quot;&gt;&lt;/script&gt;
&lt;!-- End Cloudflare Web Analytics --&gt;</content><author><name></name></author><category term="infrastructure" /><summary type="html">This guide walks through how to instantiate a Virtual Machine (VM) in Google Cloud Platform (GCP) with a running Bitbucket container, using Terraform.</summary></entry></feed>